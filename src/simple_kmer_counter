#!/usr/bin/env python

"""
Input : Fastq file 
        Length of the kmers
Output: A frequency distribution of the kmers
"""

from sys import argv, stderr, stdin, exit, stdout
from getopt import getopt, GetoptError

import string

__author__ = "Aakrosh Ratan"
__email__  = "ratan@bx.psu.edu"

# do we want the debug information to be printed?
debug_flag = False

class fastqsequence:
    def __init__(self, name, seq, qual):
        self.name = name
        self.seq  = seq
        self.qual = qual

    def fq2seqfa(self):
        str  = ">%s\n" % self.name
        str += "%s\n" % self.seq
        return str[:-1]

    def fq2qfa(self, offset):
        str  = ">%s\n" % self.name
        for q in self.qual:
            str += "%d " % (ord(q) - offset)
        return str[:-1]

    def __str__(self):
        str = "@%s\n" % self.name
        str += "%s\n" % self.seq
        str += "+\n"
        str += "%s\n" % self.qual
        return str[:-1]

    def __len__(self):
        assert len(self.seq) == len(self.qual)
        return len(self.seq)

class fastq:
    def __init__(self, filename):
        self.file = open(filename, "r")
        self.fastqsequence = None

    def __del__(self):
        self.file.close()

    def __iter__(self):
        return self

    @staticmethod
    def checkbases(line):
        for base in line[:-1]:
            if base not in ["a","c","g","t","n","A","C","G","T","N","."]:
                return False
        return True

    def close(self):
        self.file.close()

    def next(self):
        line = self.file.readline()
        if not line:
            self.file.close()
            raise StopIteration
        assert line[0] == "@", "header should begin with a @ in a fastq file"
        name = line[1:-1]
        
        line = self.file.readline()
        assert fastq.checkbases(line) == True, \
        "read %s should only have ACGTN" % (self.name)
        seq = line[:-1].upper()
        
        line = self.file.readline()
        assert line[0] == "+", \
        "separator line in fastq file should begin with a +"

        line = self.file.readline()
        qual = line[:-1]

        self.fastqsequence = fastqsequence(name, seq, qual)
    
        return self

def reverse_complement(seq):
    complement = string.maketrans('atcgnATCGN', 'tagcnTAGCN')
    return seq.translate(complement)[::-1]

def ConvertStringToKmer(word):
    kmer = 0
    for i,w in enumerate(word):
        if w == "A":
            kmer += 0
        elif w == "C":
            kmer += 1
        elif w == "G":
            kmer += 2
        elif w == "T":
            kmer += 3
        else:
            print >> stderr, "Unknown base: %s" % w
            exit(5)
        if i != (len(word) - 1):
            kmer = kmer << 2
    return kmer

def ConvertKmerToString(kmer, klength):
    word = ""
    for i in range(0, 2*klength, 2):
        mask = pow(2,i) + pow(2,i+1)
        repr = kmer & mask         
        for j in range(0, i/2):
            repr = repr >> 2
        if repr == 0:
            word += "A"
        elif repr == 1:
            word += "C"
        elif repr == 2:
            word += "G"
        elif repr == 3:
            word += "T"
    return word[::-1]

def main(klength, filename, printFrequencies):
    kmers = {}

    num_sequences_processed = 0
    records = fastq(filename)

    for r in records:
        s = r.fastqsequence

        for i in range(0, len(s.seq) - klength + 1):
            kmer = s.seq[i:i+klength]
            
            # replace all N's with A's
            kmer = kmer.replace("N","A")

            reversekmer = reverse_complement(kmer)

            if kmer < reversekmer:
                stored = kmer
            else:
                stored = reversekmer
            
            # convert to a more concise representation
            stored_kmer = ConvertStringToKmer(stored)

            if stored_kmer not in kmers:
                kmers[stored_kmer] = 0
            kmers[stored_kmer] += 1

        num_sequences_processed += 1
        if num_sequences_processed % 1000 == 0:
            print >> stderr, "Processed %d sequences" % num_sequences_processed

    records.close()
    print >> stderr, "Counted %d kmers" % len(kmers)

    if printFrequencies == True:
        frequency = {}

        for kmer,kmerCount in kmers.items():
            if kmerCount not in frequency:
                frequency[kmerCount] = 0
            frequency[kmerCount] += 1
      
        for k,v in frequency.items():
            print ConvertKmerToString(k, klength),v
    else:
        keys = kmers.keys()
        for kmer in keys:
            print ConvertKmerToString(kmer, klength), kmers[kmer]
    

def usage():
    f = stderr
    print >> f, "usage:"
    print >> f, "simple_kmer_counter  [options] klength reads.fq "
    print >> f, "where the options are:"
    print >> f, "-h,--help : print usage and quit"
    print >> f, "-d,--debug: print debug information"
    print >> f, "-f,--freqs: print the kmer frequency distribution"

if __name__ == "__main__":
    try:
        opts, args = getopt(argv[1:], "hdf",["help", "debug", "freqs"])
    except GetoptError, err:
        print str(err)
        usage()
        exit(2) 

    printFrequencies = False
    
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            exit()
        elif o in ("-d", "--debug"):
            debug_flag = True
        elif o in ("-f", "--freqs"):
            printFrequencies = True     
        else:
            assert False, "unhandled option"

    if len(args) != 2:
        usage()
        exit(3)

    main(int(args[0]), args[1], printFrequencies)
